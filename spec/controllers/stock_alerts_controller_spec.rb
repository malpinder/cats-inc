require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StockAlertsController do

  before do
    sign_in user
  end

  let(:user) do
    User.create(email: "a@b.c", password: 'password', password_confirmation: 'password')
  end

  let(:item) do
    Item.create(name: "Cat food", price: 599, amount_in_stock: 6, promoted: true)
  end

  # This should return the minimal set of attributes required to create a valid
  # Purchase. As you add validations to Purchase, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { item_id: item.id, user_id: user.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PurchasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:valid_params) do
    { item_id: item.id, purchase: valid_attributes }
  end

  describe "GET show" do
    it "assigns the requested stock_alert as @stock_alert" do
      stock_alert = StockAlert.create! valid_attributes
      get :show, {:id => stock_alert.to_param}, valid_session
      assigns(:stock_alert).should eq(stock_alert)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new StockAlert" do
        expect {
          post :create, {item_id: item.id, stock_alert: valid_attributes}, valid_session
        }.to change(StockAlert, :count).by(1)
      end

      it "assigns a newly created stock_alert as @stock_alert" do
        post :create, {item_id: item.id, stock_alert: valid_attributes}, valid_session
        assigns(:stock_alert).should be_a(StockAlert)
        assigns(:stock_alert).should be_persisted
      end

      it "redirects to the created stock_alert" do
        post :create, {item_id: item.id, stock_alert: valid_attributes}, valid_session
        response.should redirect_to(StockAlert.last)
      end
    end

    describe "with invalid params" do

      it "redirects to the item" do
        # Trigger the behavior that occurs when invalid params are submitted
        StockAlert.any_instance.stub(:save).and_return(false)
        post :create, {item_id: item.id, stock_alert: { "user_id" => "invalid value" }}, valid_session
        response.should redirect_to(item)
      end
    end
  end


  describe "DELETE destroy" do
    it "destroys the requested stock_alert" do
      stock_alert = StockAlert.create! valid_attributes
      expect {
        delete :destroy, {:id => stock_alert.to_param}, valid_session
      }.to change(StockAlert, :count).by(-1)
    end

    it "redirects to the item" do
      stock_alert = StockAlert.create! valid_attributes
      delete :destroy, {:id => stock_alert.to_param}, valid_session
      response.should redirect_to(item)
    end
  end

end

require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PurchasesController do

  before do
    user = User.create(email: "a@b.c", password: 'password', password_confirmation: 'password')
    sign_in user
  end

  # This should return the minimal set of attributes required to create a valid
  # Purchase. As you add validations to Purchase, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "user_id" => "1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PurchasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:valid_params) do
    { item_id: item.id, purchase: valid_attributes }
  end

  let(:item) do
    Item.create(name: "Cat food", price: 599, amount_in_stock: 6, promoted: true)
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Purchase" do
        expect {
          post :create, valid_params, valid_session
        }.to change(Purchase, :count).by(1)
      end

      it "assigns a newly created purchase as @purchase" do
        post :create, valid_params, valid_session
        assigns(:purchase).should be_a(Purchase)
        assigns(:purchase).should be_persisted
      end

      it "redirects to the item" do
        post :create, valid_params, valid_session
        response.should redirect_to(item)
      end
    end

    describe "with invalid params" do

      it "redirects to the item" do
        # Trigger the behavior that occurs when invalid params are submitted
        Purchase.any_instance.stub(:save).and_return(false)
        post :create, { :item_id => item.id, :purchase => { "user_id" => "invalid value" }}, valid_session
        response.should redirect_to(item)
      end
    end
  end

end
